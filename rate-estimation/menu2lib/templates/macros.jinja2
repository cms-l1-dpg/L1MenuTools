{#
 # @author: Takashi MATSUSHITA
 #}

{#
 # get maximum number of taus
 #}
{%- macro getMaxTaus() -%}
12
{%- endmacro -%}


{#
 # get comparison operator
 #}
{% macro getOperator(operator, tmEventSetup) %}
  {%- if operator == tmEventSetup.GE -%} >=
  {%- elif operator == tmEventSetup.EQ -%} ==
  {%- endif -%}
{% endmacro %}


{#
 # get IPhi
 #}
{%- macro getIPhi(prefix, idx) -%}
  {%- if (prefix | isMuon) -%}
    data->{{prefix}}IPhiAtVtx.at({{idx}})
  {%- else -%}
    data->{{prefix}}IPhi.at({{idx}})
  {%- endif -%}
{%- endmacro -%}


{#
 # get IEta
 #}
{%- macro getIEta(prefix, idx) -%}
  {%- if (prefix | isMuon) -%}
    data->{{prefix}}IEtaAtVtx.at({{idx}})
  {%- else -%}
    data->{{prefix}}IEta.at({{idx}})
  {%- endif -%}
{%- endmacro -%}


{#
 # set delta phi
 #}
{% macro setDeltaPhi(prefix0, prefix1, idx0, idx1, LUTS, iPi, useDelta=True, ns='') %}
  int {{ns}}iPhi = {{ getIPhi(prefix0, idx0) }};
  {% if (prefix0 != prefix1) and (prefix1 | isMuon) %}
    {{ns}}iPhi = {{LUTS.CONV_PHI}}[{{ns}}iPhi];
  {% endif %}

  unsigned int {{ns}}deltaIPhi = abs({{ns}}iPhi - {{ getIPhi(prefix1, idx1) }});
  if ({{ns}}deltaIPhi >= {{iPi}}) {{ns}}deltaIPhi = 2*{{iPi}} - {{ns}}deltaIPhi;
  {% if useDelta %}
      const unsigned int {{ns}}deltaPhi = {{LUTS.DPHI}}[{{ns}}deltaIPhi];
  {% endif %}
{% endmacro %}


{#
 # set delta eta
 #}
{% macro setDeltaEta(prefix0, prefix1, idx0, idx1, LUTS, useDelta=True, ns='') %}
  {% if ns %}int {% endif %}{{ns}}iEta = {{ getIEta(prefix0, idx0) }};
  {% if (prefix0 != prefix1) and (prefix1 | isMuon) %}
    if ({{ns}}iEta < 0) {{ns}}iEta += {{LUTS.ETA_OFFSET}};
    {{ns}}iEta = {{LUTS.CONV_ETA}}[{{ns}}iEta];
  {% endif %}
  {% if ns %}int {% endif %}{{ns}}deltaIEta = abs({{ns}}iEta - {{ getIEta(prefix1, idx1) }});
  {% if useDelta %}
    unsigned int {{ns}}deltaEta = {{LUTS.DETA}}[{{ns}}deltaIEta];
  {% endif %}
{% endmacro %}


{#
 # set delta R2
 #}
{%- macro setDeltaR2(prefix0, prefix1, idx0, idx1, LUTS, iPi, useDelta=True) -%}
    {{ setDeltaEta(prefix0, prefix1, idx0, idx1, LUTS, useDelta) }}
    {{ setDeltaPhi(prefix0, prefix1, idx0, idx1, LUTS, iPi, useDelta) }}
    const long long deltaR2 = deltaEta*deltaEta + deltaPhi*deltaPhi;
{%- endmacro -%}


{#
 # set mass2
 #}
{%- macro setMass2(prefix0, prefix1, idx0, idx1, LUTS, iPi, useDelta=True, ns='') -%}
    {{ setDeltaEta(prefix0, prefix1, idx0, idx1, LUTS, useDelta, ns) }}
    {{ setDeltaPhi(prefix0, prefix1, idx0, idx1, LUTS, iPi, useDelta, ns) }}
    const long long {{ns}}coshDeltaEta = {{LUTS.COSH_DETA}}[{{ns}}deltaIEta];
    const long long {{ns}}cosDeltaPhi = {{LUTS.COS_DPHI}}[{{ns}}deltaIPhi];
    const long long {{ns}}pt0 = {{LUTS.ET0}}[data->{{prefix0}}IEt.at({{idx0}})];
    const long long {{ns}}pt1 = {{LUTS.ET1}}[data->{{prefix1}}IEt.at({{idx1}})];
    const long long {{ns}}mass2 = {{ns}}pt0 * {{ns}}pt1 * ({{ns}}coshDeltaEta - {{ns}}cosDeltaPhi);
{%- endmacro -%}

{#
 # set massUpt2
 #}
{%- macro setMassUpt2(prefix0, prefix1, idx0, idx1, LUTS, iPi, useDelta=True) -%}
    {{ setDeltaEta(prefix0, prefix1, idx0, idx1, LUTS, useDelta) }}
    {{ setDeltaPhi(prefix0, prefix1, idx0, idx1, LUTS, iPi, useDelta) }}
    const long long coshDeltaEta = {{LUTS.COSH_DETA}}[deltaIEta];
    const long long cosDeltaPhi = {{LUTS.COS_DPHI}}[deltaIPhi];
    const long long upt0 = {{LUTS.UPT0}}[data->{{prefix0}}IEtUnconstrained.at({{idx0}})];
    const long long upt1 = {{LUTS.UPT1}}[data->{{prefix1}}IEtUnconstrained.at({{idx1}})];
    const long long mass2 = upt0 * upt1 * (coshDeltaEta - cosDeltaPhi);
{%- endmacro -%}

{#
 # set mass2 over delta R2
 #}
{%- macro setMass2DeltaR2(prefix0, prefix1, idx0, idx1, LUTS, iPi, useDelta=True) -%}
    {{ setMass2(prefix0, prefix1, idx0, idx1, LUTS, iPi, useDelta) }}
    const long long inversedR2 = {{LUTS.COS_DPHI}}[deltaIPhi];
    {# dummy LUT for now #}
    const long long mass2deltaR2 = mass2 * inversedR2;
{%- endmacro -%}
{# get actual LUT name #}

{#
 # set mass3
 #}
{%- macro setMass3(prefix0, prefix1, prefix2, idx0, idx1, idx2, LUTS, iPi, useDelta=True) -%}
    {{ setMass2(prefix0, prefix1, idx0, idx1, LUTS, iPi, useDelta, 'ab_') }}
    {{ setMass2(prefix0, prefix2, idx0, idx2, LUTS, iPi, useDelta, 'ac_') }}
    {{ setMass2(prefix1, prefix2, idx1, idx2, LUTS, iPi, useDelta, 'bc_') }}
    const long long mass3 = ab_mass2 + ac_mass2 + bc_mass2;
{%- endmacro -%}


{#
 # set mt2
 #}
{%- macro setMt2(prefix0, prefix1, idx0, idx1, LUTS, iPi, useDelta=True) -%}
    {{ setDeltaPhi(prefix0, prefix1, idx0, idx1, LUTS, iPi, useDelta) }}
    const long long cosDeltaPhi = {{LUTS.COS_DPHI}}[deltaIPhi];
    const long long pt0 = {{LUTS.ET0}}[data->{{prefix0}}IEt.at({{idx0}})];
    const long long pt1 = {{LUTS.ET1}}[data->{{prefix1}}IEt.at({{idx1}})];
    const long long mt2 = pt0 * pt1 * ({{10**LUTS.PREC_MATH}} - cosDeltaPhi);
{%- endmacro -%}


{#
 # apply function cut
 #}
{% macro applyFunctionCut(value, cut, precision) -%}
    {
      const long long minimum = {{(cut.getMinimum().value * 10**precision) | int}}; // {{cut.getMinimum().value}} * 10^{{precision}}
      const long long maximum = {{(cut.getMaximum().value * 10**precision) | int}}; // {{cut.getMaximum().value}} * 10^{{precision}}
      if (not ((minimum <= {{value}}) and (maximum == 0)) or ((minimum <= {{value}}) and ({{value}} <= maximum))) continue;      
    }
{% endmacro -%}


{#
 # get cuts for object
 #}
{%- macro getObjectCuts(prefix, idx, object, tmEventSetup, nEtaBits) %}
      {
{# local variables #}
{% set cuts = object.getCuts() %}
{% set etaWindows = [] %}
{% set phiWindows = [] %}
{# loop over cuts #}
{% for cut in cuts %}
{#   set threshold #}
{%   if cut.getCutType() == tmEventSetup.Threshold %}
        // {{object.getName()}}: ET {{ getOperator(object.getComparisonOperator(), tmEventSetup) }} {{cut.getMinimumIndex()}} at BX = {{object.getBxOffset()}}
        if (not (data->{{prefix}}IEt.at({{idx}}) {{ getOperator(object.getComparisonOperator(), tmEventSetup) }} {{ cut.getMinimumIndex() }})) continue;

{%   elif cut.getCutType() == tmEventSetup.UnconstrainedPt %}
        // {{object.getName()}}: UnconstrainedPt >= {{cut.getMinimumIndex()}} at BX = {{object.getBxOffset()}}
        if (not (data->{{prefix}}IEtUnconstrained.at({{idx}}) >= {{ cut.getMinimumIndex() }})) continue;

{# set eta ranges #}
{% elif cut.getCutType() == tmEventSetup.Eta %}
{% if not etaWindows %}
        const auto eta = {{ getIEta(prefix, idx) }};
{% endif %}
        // {{ cut.getMinimumValue() }} <= eta <= {{ cut.getMaximumValue()}}
        const bool etaWindow{{etaWindows | count}} = (({{ cut.getMinimumIndex() | toDecimal(nEtaBits) }} <= eta) and (eta <= {{ cut.getMaximumIndex() | toDecimal(nEtaBits) }}));
{% if etaWindows.append(etaWindows | count) %}{% endif %}

{# set phi ranges #}
{% elif cut.getCutType() == tmEventSetup.Phi %}
{% if not phiWindows %}
        const auto phi = {{ getIPhi(prefix, idx) }};
{% endif %}
        // {{ cut.getMinimumValue() }} <= phi <= {{ cut.getMaximumValue()}}
        const bool phiWindow{{phiWindows | count}} = (({{ cut.getMinimumIndex() }} <= phi) and (phi <= {{ cut.getMaximumIndex() }}));
{% if phiWindows.append(phiWindows | count) %}{% endif %}

{# set quality #}
{% elif cut.getCutType() == tmEventSetup.Quality %}
        // quality : {{"0x%x" % cut.getData() | int }}
        if (not (({{"0x%x" % cut.getData() | int}} >> data->{{prefix}}Qual.at({{idx}})) & 1)) continue;

{# set isolation #}
{% elif cut.getCutType() == tmEventSetup.Isolation %}
        // isolation : {{"0x%x" % cut.getData() | int }}
        if (not (({{"0x%x" % cut.getData() | int}} >> data->{{prefix}}Iso.at({{idx}})) & 1)) continue;

{# set impact parameter #}
{% elif cut.getCutType() == tmEventSetup.ImpactParameter %}
        // impact parameter : {{"0x%x" % cut.getData() | int }}
        if (not (({{"0x%x" % cut.getData() | int}} >> data->{{prefix}}Dxy.at({{idx}})) & 1)) continue;

{# set displaced jet bit #}
{% elif cut.getCutType() == tmEventSetup.Displaced %}
        // displaced jet bit : {{"0x%x" % cut.getData() | int }}
        if (not (({{"0x%x" % cut.getData() | int}} & data->{{prefix}}HwQual.at({{idx}})) & 1)) continue;

{# set charge #}
{% elif cut.getCutType() == tmEventSetup.Charge %}
        // charge : {{ cut.getData() }}
        if (not ({{cut.getData() | toCharge}} == data->{{prefix}}Chg.at({{idx}}))) continue;

{% endif %}
{% endfor %}
{% if etaWindows %}
        if (not ({% for i in etaWindows %}{% if loop.index0 %} or {% endif %}etaWindow{{i}}{% endfor %})) continue;

{% endif %}
{% if phiWindows %}
        if (not ({% for i in phiWindows %}{% if loop.index0 %} or {% endif %}phiWindow{{i}}{% endfor %})) continue;

{% endif %}
      }
{% endmacro %}


{#
 # get cuts for esum
 #}
{% macro getEsumCuts(prefix, idx, object, tmEventSetup) %}
    {
  {# local variables #}
  {% set cuts = object.getCuts() %}
  {% set phiWindows = [] %}
  {# loop over cuts #}
  {% for cut in cuts %}
    {% if cut.getCutType() == tmEventSetup.Threshold %}
      // {{object.getName()}}: ET {{ getOperator(object.getComparisonOperator(), tmEventSetup) }} {{cut.getMinimumIndex()}} at BX = {{object.getBxOffset()}}
      if (not (data->{{prefix}}IEt.at({{idx}}) {{ getOperator(object.getComparisonOperator(), tmEventSetup) }} {{ cut.getMinimumIndex() }})) continue;
    {% elif cut.getCutType() == tmEventSetup.Count %}
      // {{object.getName()}}: Count {{ getOperator(object.getComparisonOperator(), tmEventSetup) }} {{cut.getMinimumIndex()}} at BX = {{object.getBxOffset()}}
      if (not (data->{{prefix}}IEt.at({{idx}}) {{ getOperator(object.getComparisonOperator(), tmEventSetup) }} {{ cut.getMinimumIndex() }})) continue;
    {# set phi ranges #}
    {% elif cut.getCutType() == tmEventSetup.Phi %}
    {%- if not phiWindows -%}
      const auto phi = {{ getIPhi(prefix, idx) }};
    {% endif %}
    // {{ cut.getMinimumValue() }} <= phi <= {{ cut.getMaximumValue()}}
      const bool phiWindow{{phiWindows | count}} = (({{ cut.getMinimumIndex() }} <= phi) and (phi <= {{ cut.getMaximumIndex() }}));
      {% if phiWindows.append(phiWindows | count) %}{% endif %}
    {% endif %}
  {% endfor %}

  {% if phiWindows %}
    if (not ({% for i in phiWindows %}{% if loop.index0 %} or {% endif %}phiWindow{{i}}{% endfor %})) continue;
  {%- endif %}

    }

{% endmacro %}


{#
 # get cuts for correlations of objects with the same type
 #}
{% macro getSameTypeCorrelationCuts(prefix, idx0, idx1, cond, tmEventSetup, LUTS, iPi) %}
  {{ cond | hasCorrelationCuts }}
  {% for cut in cond.getCuts() %}
  {% if cut.getCutType() == tmEventSetup.DeltaEta %}
    // {{cut.getMinimum().value}} <= DeltaEta <= {{cut.getMaximum().value}}
    {{ setDeltaEta(prefix, prefix, idx0, idx1, LUTS) }}
    {{ applyFunctionCut('deltaEta', cut, LUTS.PREC_DELTA) }}

  {% elif cut.getCutType() == tmEventSetup.DeltaPhi %}
    // {{cut.getMinimum().value}} <= DeltaPhi <= {{cut.getMaximum().value}}
    {{ setDeltaPhi(prefix, prefix, idx0, idx1, LUTS, iPi) }}
    {{ applyFunctionCut('deltaPhi', cut, LUTS.PREC_DELTA) }}

  {% elif cut.getCutType() == tmEventSetup.DeltaR %}
    // {{cut.getMinimum().value | toDeltaR }} <= DeltaR <= {{cut.getMaximum().value | toDeltaR}}
    {{ setDeltaR2(prefix, prefix, idx0, idx1, LUTS, iPi) }}
    {{ applyFunctionCut('deltaR2', cut, LUTS.PREC_DR) }}

  {% elif cut.getCutType() == tmEventSetup.Mass %}
    // {{ cut.getMinimum().value | toMass }} <= mass <= {{ cut.getMaximum().value | toMass}}
    {{ setMass2(prefix, prefix, idx0, idx1, LUTS, iPi, False, '') }}
    {{ applyFunctionCut('mass2', cut, LUTS.PREC_MASS) }}

  {% elif cut.getCutType() == tmEventSetup.MassUpt %}
    // {{ cut.getMinimum().value | toMass }} <= mass <= {{ cut.getMaximum().value | toMass}}
    {{ setMassUpt2(prefix, prefix, idx0, idx1, LUTS, iPi, False) }}
    {{ applyFunctionCut('mass2', cut, LUTS.PREC_MASS) }}

  {% elif cut.getCutType() == tmEventSetup.MassDeltaR %}
    // {{ cut.getMinimum().value | toMassDeltaR }} <= massdr <= {{ cut.getMaximum().value | toMassDeltaR}}
    {{ setMass2DeltaR2(prefix, prefix, idx0, idx1, LUTS, iPi, False) }}
    {{ applyFunctionCut('mass2deltaR2', cut, LUTS.PREC_INVDR) }}


  {% elif cut.getCutType() == tmEventSetup.ChargeCorrelation %}
    if (data->{{prefix}}Chg.at({{idx0}}) == 0) continue;  // charge valid bit not set
    if (data->{{prefix}}Chg.at({{idx1}}) == 0) continue;  // charge valid bit not set
{% if cut.getData() == 'os' %}
    // opposite-sign (os)
    if (not (data->{{prefix}}Chg.at({{idx0}}) != data->{{prefix}}Chg.at({{idx1}}))) continue;
{% elif cut.getData() == 'ls' %}
    // like-sign (ls)
    if (not (data->{{prefix}}Chg.at({{idx0}}) == data->{{prefix}}Chg.at({{idx1}}))) continue;
{% endif %}
  {% endif %}
  {% endfor %}
{% endmacro %}

{#
 # get cuts for correlations of objects with the same type
 #}
{% macro getSameTypeCorrelationCuts3(prefix, idx0, idx1, idx2, cond, tmEventSetup, LUTS, iPi) %}
  {{ cond | hasCorrelationCuts }}
  {% for cut in cond.getCuts() %}
  {% if cut.getCutType() == tmEventSetup.Mass %}
    // {{ cut.getMinimum().value | toMass }} <= mass <= {{ cut.getMaximum().value | toMass}}
    {{ setMass3(prefix, prefix, prefix, idx0, idx1, idx2, LUTS, iPi, False) }}
    {{ applyFunctionCut('mass3', cut, LUTS.PREC_MASS) }}
  {% elif cut.getCutType() == tmEventSetup.ChargeCorrelation %}
    if (data->{{prefix}}Chg.at({{idx0}}) == 0) continue;  // charge valid bit not set
    if (data->{{prefix}}Chg.at({{idx1}}) == 0) continue;  // charge valid bit not set
    if (data->{{prefix}}Chg.at({{idx2}}) == 0) continue;  // charge valid bit not set
{% if cut.getData() == 'os' %}
    // opposite-sign (os)
    if (not(fabs(data->{{prefix}}Chg.at({{idx0}})+data->{{prefix}}Chg.at({{idx1}})+data->{{prefix}}Chg.at({{idx2}})) == fabs(data->{{prefix}}Chg.at({{idx0}})))) continue;
{% elif cut.getData() == 'ls' %}
    // like-sign (ls)
    if ((fabs(data->{{prefix}}Chg.at({{idx0}})+data->{{prefix}}Chg.at({{idx1}})+data->{{prefix}}Chg.at({{idx2}})) == fabs(data->{{prefix}}Chg.at({{idx0}})))) continue;
{% endif %}
  {% endif %}
  {% endfor %}
{% endmacro %}



{#
 # get cuts for correlations of objects with the different type
 #}
{% macro getDifferentTypeCorrelationCuts(prefix0, prefix1, idx0, idx1, cond, tmEventSetup, LUTS, iPi) %}
  {% set convert = true if (prefix1 | isMuon) else false %}
  {{ cond | hasCorrelationCuts }}
  {% for cut in cond.getCuts() %}
  {% if cut.getCutType() == tmEventSetup.DeltaEta %}
    // {{cut.getMinimum().value}} <= DeltaEta <= {{cut.getMaximum().value}}
    {{ setDeltaEta(prefix0, prefix1, idx0, idx1, LUTS) }}
    {{ applyFunctionCut('deltaEta', cut, LUTS.PREC_DELTA) }}

  {% elif cut.getCutType() == tmEventSetup.DeltaPhi %}
    // {{cut.getMinimum().value}} <= DeltaPhi <= {{cut.getMaximum().value}}
    {{ setDeltaPhi(prefix0, prefix1, idx0, idx1, LUTS, iPi) }}
    {{ applyFunctionCut('deltaPhi', cut, LUTS.PREC_DELTA) }}

  {% elif cut.getCutType() == tmEventSetup.DeltaR %}
    // {{cut.getMinimum().value | toDeltaR }} <= DeltaR <= {{cut.getMaximum().value | toDeltaR}}
    {{ setDeltaR2(prefix0, prefix1, idx0, idx1, LUTS, iPi) }}
    {{ applyFunctionCut('deltaR2', cut, LUTS.PREC_DR) }}

  {% elif cut.getCutType() == tmEventSetup.Mass %}
    // {{ cut.getMinimum().value | toMass }} <= mass <= {{ cut.getMaximum().value | toMass}}
    {{ setMass2(prefix0, prefix1, idx0, idx1, LUTS, iPi, False, '') }}
    {{ applyFunctionCut('mass2', cut, LUTS.PREC_MASS) }}

  {% endif %}
  {% endfor %}
{% endmacro %}


{#
 # get cuts for correlations of object and esum
 #}
{% macro getEsumCorrelationCuts(object, esum, idx0, idx1, cond, tmEventSetup, LUTS, iPi) %}
  {% for cut in cond.getCuts() %}
  {% if cut.getCutType() == tmEventSetup.DeltaPhi %}
    // {{cut.getMinimum().value}} <= DeltaPhi <= {{cut.getMaximum().value}}
    {{ setDeltaPhi(esum, object, idx1, idx0, LUTS, iPi) }}
    {{ applyFunctionCut('deltaPhi', cut, LUTS.PREC_DELTA) }}
  {% endif %}
  {% endfor %}
{% endmacro %}


{#
 # get cuts for mT of calo object and esum
 #}
{% macro getEsumMtCuts(object, esum, idx0, idx1, cond, tmEventSetup, LUTS, iPi) %}
  {% for cut in cond.getCuts() %}
  {% if cut.getCutType() == tmEventSetup.Mass %}
    // {{ cut.getMinimum().value | toMass }} <= Mt <= {{ cut.getMaximum().value | toMass }}
    {{ setMt2(object, esum, idx0, idx1, LUTS, iPi, False) }}
    {{ applyFunctionCut('mt2', cut, LUTS.PREC_MASS) }}

  {% elif cut.getCutType() == tmEventSetup.DeltaPhi %}
    // {{cut.getMinimum().value}} <= DeltaPhi <= {{cut.getMaximum().value}}
    {{ setDeltaPhi(esum, object, idx1, idx0, LUTS, iPi) }}
    {{ applyFunctionCut('deltaPhi', cut, LUTS.PREC_DELTA) }}
  {% endif %}
  {% endfor %}
{% endmacro %}


{#
 # check object index
 #}
{% macro checkObjectIndex(object, index) %}
{% if object.getCuts() | hasIndexCut %}{# check range #}
{% set range = object.getCuts() | getIndexCut %}
    // index : [{{ range[0] }}, {{ range[1] }}]  NB: index = {{index}} - 1
    if (not (({{range[0]}} < {{index}}) and ({{index}} <= ({{range[1]}}+1)))) continue;
{% endif %}
{% endmacro %}


{#
 # get indicies of reference objects
 #}
{% macro getReference(object, tmEventSetup, nEtaBits) %}
  // remove overlap -- reference: {{object.getName()}}
  std::vector<int> reference;
  {% set prefixRef = object | getPrefix %}
  size_t nref = 0;
  for (size_t ii = 0; ii < data->{{prefixRef}}Bx.size(); ii++)
  {
    if (not (data->{{prefixRef}}Bx.at(ii) == {{ object.getBxOffset() }})) continue;
    nref++;
    {% if prefixRef | isTau %}
      if (nref > {{getMaxTaus()}}) break;
    {% endif %}
    {{ checkObjectIndex(object, 'nref') }}
    {{ getObjectCuts(prefixRef, 'ii', object, tmEventSetup, nEtaBits) }}
    reference.emplace_back(ii);
  }
  if (not reference.size()) return false;
{% endmacro %}


{#
 # remove overlapped objects
 #}
{% macro removeOverlap(cond, obj_tgt, idx_tgt, obj_ref, tmEventSetup, scaleMap, iPi) %}
  {% set objects = obj_tgt | sortObjects(obj_ref) %}
  {% if (obj_tgt != objects[0]) %} {# swapped #}
    {% set idx0 = 'index' %}
    {% set idx1 = idx_tgt %}
  {% else %}
    {% set idx0 = idx_tgt %}
    {% set idx1 = 'index' %}
  {% endif %}
  {% set prefix0 = objects[0] | getPrefix %}
  {% set prefix1 = objects[1] | getPrefix %}
  {% set LUTS = scaleMap | getLookUpTable(objects[0], objects[1]) %}

  // remove overlap -- target: {{obj_tgt.getName()}}
  {% for cut in cond.getCuts() %} {# extract cut values #}
  {% if cut.getCutType() == tmEventSetup.OvRmDeltaEta %}
  // {{cut.getMinimum().value}} <= DeltaEta <= {{cut.getMaximum().value}}
  long long minDeltaEta = std::numeric_limits<long long>::max();
  const long long cutDeltaEtaMin = {{(cut.getMinimum().value * 10**LUTS.PREC_DELTA) | int}}; // {{cut.getMinimum().value}} * 10^{{LUTS.PREC_DELTA}}
  const long long cutDeltaEtaMax = {{(cut.getMaximum().value * 10**LUTS.PREC_DELTA) | int}}; // {{cut.getMaximum().value}} * 10^{{LUTS.PREC_DELTA}}

  {% elif cut.getCutType() == tmEventSetup.OvRmDeltaPhi %}
  // {{cut.getMinimum().value}} <= DeltaPhi <= {{cut.getMaximum().value}}
  long long minDeltaPhi = std::numeric_limits<long long>::max();
  const long long cutDeltaPhiMin = {{(cut.getMinimum().value * 10**LUTS.PREC_DELTA) | int}}; // {{cut.getMinimum().value}} * 10^{{LUTS.PREC_DELTA}}
  const long long cutDeltaPhiMax = {{(cut.getMaximum().value * 10**LUTS.PREC_DELTA) | int}}; // {{cut.getMaximum().value}} * 10^{{LUTS.PREC_DELTA}}

  {% elif cut.getCutType() == tmEventSetup.OvRmDeltaR %}
  // {{cut.getMinimum().value | toDeltaR}} <= DeltaR <= {{cut.getMaximum().value|toDeltaR}}
  long long minDeltaR2 = std::numeric_limits<long long>::max();
  const long long cutDeltaR2Min = {{(cut.getMinimum().value * 10**LUTS.PREC_DR) | int}}; // {{cut.getMinimum().value}} * 10^{{LUTS.PREC_DR}}
  const long long cutDeltaR2Max = {{(cut.getMaximum().value * 10**LUTS.PREC_DR) | int}}; // {{cut.getMaximum().value}} * 10^{{LUTS.PREC_DR}}
  {% endif %}
  {% endfor %}

  // compute minimum distance to reference objects
  for (size_t _jj = 0; _jj < reference.size(); _jj++)
  {
    const int index = reference.at(_jj);
    {% for cut in cond.getCuts() %}
    {% if cut.getCutType() == tmEventSetup.OvRmDeltaEta %}
      {{ setDeltaEta(prefix0, prefix1, idx0, idx1, LUTS) }}
      if (deltaEta < minDeltaEta) minDeltaEta = deltaEta;

    {% elif cut.getCutType() == tmEventSetup.OvRmDeltaPhi %}
      {{ setDeltaPhi(prefix0, prefix1, idx0, idx1, LUTS, iPi) }}
      if (deltaPhi < minDeltaPhi) minDeltaPhi = deltaPhi;

    {% elif cut.getCutType() == tmEventSetup.OvRmDeltaR %}
      {{ setDeltaR2(prefix0, prefix1, idx0, idx1, LUTS, iPi) }}
      if (deltaR2 < minDeltaR2) minDeltaR2 = deltaR2;
    {% endif %}
    {% endfor %}
  }

  // skip if needed
  {% for cut in cond.getCuts() %}
  {% if cut.getCutType() == tmEventSetup.OvRmDeltaEta %}
  if ((cutDeltaEtaMin <= minDeltaEta) and (minDeltaEta <= cutDeltaEtaMax)) continue;

  {% elif cut.getCutType() == tmEventSetup.OvRmDeltaPhi %}
  if ((cutDeltaPhiMin <= minDeltaPhi) and (minDeltaPhi <= cutDeltaPhiMax)) continue;

  {% elif cut.getCutType() == tmEventSetup.OvRmDeltaR %}
  if ((cutDeltaR2Min <= minDeltaR2) and (minDeltaR2 <= cutDeltaR2Max)) continue;

  {% endif %}
  {% endfor %}
{% endmacro %}

{# eof #}

